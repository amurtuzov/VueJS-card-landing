const helpers = require("./helpers"),
    webpackConfig = require("./webpack.config.base"),
    HtmlWebpackPlugin = require("html-webpack-plugin"),
    DefinePlugin = require("webpack/lib/DefinePlugin"),
    CopyWebpackPlugin = require("copy-webpack-plugin"),
    BundleTracker = require("webpack-bundle-tracker"),
    autoprefixer = require("autoprefixer"),
    settings = require("./settings"),
    path = require("path"),
    html = require("js-beautify").html,
    fs = require("fs"),
    pug = require("pug"),
    env = require("../environment/dev.env");

if (fs.exists(helpers.root(settings.src_folder, "html"))) {
    webpackConfig.module.rules = [
        ...webpackConfig.module.plugins,
        new CopyWebpackPlugin([
            {
                from: helpers.root(settings.src_folder, "html"),
                to: "./[path][name].html",
                transform: function(content, file_path) {
                    if (path.extname(file_path) === ".pug") {
                        return html(pug.render(content), {});
                    }
                },
            },
        ]),
    ];
}

webpackConfig.module.rules = [
    ...webpackConfig.module.rules,
    {
        test: /\.s?css$/,
        use: [
            {
                loader: "style-loader",
            },
            {
                loader: "css-loader",
                options: {
                    sourceMap: true,
                },
            },
            {
                loader: "postcss-loader",
                options: {
                    sourceMap: true,
                    plugins: () => [autoprefixer],
                },
            },
            {
                loader: "sass-loader",
                options: {
                    sourceMap: true,
                },
            },
        ],
    },
    {
        test: /\.styl$/,
        use: [
            {
                loader: "style-loader",
            },
            {
                loader: "css-loader",
                options: {
                    sourceMap: true,
                },
            },
            {
                loader: "postcss-loader",
                options: {
                    sourceMap: true,
                    plugins: () => [autoprefixer],
                },
            },
            {
                loader: "stylus-loader",
                options: {
                    sourceMap: true,
                },
            },
        ],
    },
    {
        test: /\.(eot|ttf|woff|woff2)$/,
        loader: "file-loader",
        options: {
            outputPath: "/fonts/",
        },
    },
    {
        test: /\.(jpg|png|gif|svg)$/,
        loader: "file-loader",
        options: {
            outputPath: "/img/",
        },
    },
    {
        test: /\.css$/,
        loader: "css-loader",
        options: {
            sourceMap: true,
            importLoaders: 2,
        },
    },
];

const operatorPage = new HtmlWebpackPlugin({
    inject: true,
    chunks: ["operator"],
    template: helpers.root(settings.src_folder, "operator.pug"),
    favicon: helpers.root(settings.src_folder, "assets/img/favicon.ico"),
    filename: "operator.html",
});

const basketPage = new HtmlWebpackPlugin({
    inject: true,
    chunks: ["basket"],
    template: helpers.root(settings.src_folder, "basket.pug"),
    favicon: helpers.root(settings.src_folder, "assets/img/favicon.ico"),
    filename: "basket.html",
});

webpackConfig.plugins = [
    ...webpackConfig.plugins,
    operatorPage,
    basketPage,
    new DefinePlugin({ "process.env": env }),
    //new BundleTracker({filename: './webpack-stats.json'})
];

webpackConfig.watchOptions = {
    aggregateTimeout: 300,
    poll: 500,
};

module.exports = webpackConfig;